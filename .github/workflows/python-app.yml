# .github/workflows/python-tests.yml

name: Python CI/CD

on:
  push:
    branches: [ master, main ] # Запускать при пуше в ветки master или main
  pull_request:
    branches: [ master, main ] # Запускать при создании/обновлении Pull Request в master или main
  workflow_dispatch: # Позволяет запускать workflow вручную из GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest # Виртуальная машина, на которой будет выполняться CI (Ubuntu 22.04 LTS)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Шаг для клонирования вашего репозитория

    - name: Set up Python
      uses: actions/setup-python@v5 # Шаг для настройки Python
      with:
        python-version: '3.9' # Используемая версия Python. Рекомендую использовать ту, что вы используете в разработке. Можно указать '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Установка зависимостей из requirements.txt
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt not found. Skipping pip install."
        fi
        # Установка системных зависимостей для FFmpeg и Tkinter
        # Поскольку это Ubuntu, используем apt
        sudo apt-get update
        sudo apt-get install -y ffmpeg python3-tk

        # Если Helper-Utils требует компиляции и является частью вашего проекта,
        # и вы его клонируете и собираете вручную, то добавьте шаги сюда.
        # Пример (если Helper-Utils - это C++ зависимость, которая собирается):
        # git clone https://github.com/nearbyx000/Helper-Utils Helper-Utils
        # cd Helper-Utils
        # mkdir build && cd build
        # cmake ..
        # make -j$(nproc)
        # cd ../.. # Возвращаемся в корневую директорию проекта

    - name: Run Linters (Pylint, Flake8)
      run: |
        # Устанавливаем линтеры, если они не в requirements.txt
        pip install pylint flake8 black
        echo "Running Flake8..."
        flake8 . --max-line-length=120 # Можно настроить длину строки
        echo "Running Pylint..."
        # Для Pylint часто нужна конфигурация. Без нее может быть много "ложных" ошибок.
        # pylint . --disable=C0114,C0115,C0116 # Отключение предупреждений о пропущенных docstrings
        pylint . --fail-under=7.0 # Проваливать сборку, если рейтинг ниже 7.0 (настройте по необходимости)
      continue-on-error: true # Линтеры могут быть "подсказками", а не строгими требованиями для прохождения CI

    - name: Run Black Formatter Check
      run: |
        pip install black
        echo "Running Black check (no changes applied)..."
        black . --check --diff # Только проверяем, что код отформатирован, не меняем его
      continue-on-error: true # Продолжать даже если Black найдет ошибки форматирования

    - name: Run Python tests (Pytest)
      run: |
        pip install pytest # Установка Pytest
        echo "Running Pytest..."
        pytest # Запуск всех тестов в директории 'tests/'

    # Если у вас есть скрипты установки (install.sh, samba-instal.sh)
    # и вы хотите их тестировать, это будет сложнее.
    # Тестирование Bash-скриптов лучше делать с помощью специализированных инструментов
    # как Bats (Bash Automated Testing System) или в изолированных Docker-контейнерах.
    # Для простоты, мы не будем их запускать в этом CI, если они интерактивные.
    # Если они предназначены для автоматического запуска, можно добавить:
    # - name: Test install.sh (WARNING: Interactive, might hang CI!)
    #   run: |
    #     chmod +x install.sh
    #     ./install.sh < /dev/null # Пытаемся запустить, подавляя ввод. Может зависнуть!
    #   continue-on-error: true # Очень важно, т.к. скрипт интерактивный